{
  "projects": [
    {
      "name": "爬虫项目",
      "description": "一个爬虫项目",
      "details": [
        "与产品经理保持沟通，使用 Scrapy 框架对爬虫模块进行重构，提高 200% 爬虫速度并减少服务器 20% CPU负载。改进爬虫策略，降低 40% 被屏蔽的请求数。",
        "作为主要工程师设计以及开发物业模块，活动模块，实现报名，即时通知等 10个 功能。",
        "使用Redis数据库实现分布式爬虫与数据缓存，减少 50% 数据查询时间。",
        "与其他工程师合作，使用 Docker 对项目进行拆分重新架构, 减少业务模块之间的资源耦合, 实现持续集成与自动化部署。"
      ]
    },
    {
      "name": "音乐网站",
      "description": "一个音乐网站",
      "details": [
        "主要运用Vue框架，实现了视图层和模型层的分离；",
        "通过Ｖue省去了复杂的节点查询，实现了双向数据绑定,降低页面维护难度；",
        "使用了Jsonp进行跨域请求,使用了axios进行AJAX请求",
        "推荐歌单页面,歌手页,排行榜单页等都是采用v-for来循环遍历实现的；",
        "使用better-scroll实现推荐页面轮播效果；"
      ]
    },
    {
      "name": "爬虫项目升级版",
      "description": "一个爬虫项目",
      "details": [
        "与产品经理保持沟通，使用 Scrapy 框架对爬虫模块进行重构，提高 200% 爬虫速度并减少服务器 20% CPU负载。改进爬虫策略，降低 40% 被屏蔽的请求数。",
        "作为主要工程师设计以及开发物业模块，活动模块，实现报名，即时通知等 10个 功能。"
      ]
    },
    {
      "name": "音乐网站2",
      "description": "一个音乐网站",
      "details": [
        "主要运用Vue框架，实现了视图层和模型层的分离；",
        "通过Ｖue省去了复杂的节点查询，实现了双向数据绑定,降低页面维护难度；",
        "使用了Jsonp进行跨域请求,使用了axios进行AJAX请求",
        "推荐歌单页面,歌手页,排行榜单页等都是采用v-for来循环遍历实现的；",
        "使用better-scroll实现推荐页面轮播效果；"
      ]
    },
    {
      "name": "爬虫项目超级超级豪华升级版",
      "description": "一个爬虫项目",
      "details": [
        "与产品经理保持沟通，使用 Scrapy 框架对爬虫模块进行重构，提高 200% 爬虫速度并减少服务器 20% CPU负载。改进爬虫策略，降低 40% 被屏蔽的请求数。",
        "作为主要工程师设计以及开发物业模块，活动模块，实现报名，即时通知等 10个 功能。",
        "使用Redis数据库实现分布式爬虫与数据缓存，减少 50% 数据查询时间。",
        "与其他工程师合作，使用 Docker 对项目进行拆分重新架构, 减少业务模块之间的资源耦合, 实现持续集成与自动化部署。"
      ]
    },
    {
      "name": "音乐网站3",
      "description": "一个音乐网站",
      "details": [
        "主要运用Vue框架，实现了视图层和模型层的分离；",
        "通过Ｖue省去了复杂的节点查询，实现了双向数据绑定,降低页面维护难度；",
        "使用了Jsonp进行跨域请求,使用了axios进行AJAX请求",
        "推荐歌单页面,歌手页,排行榜单页等都是采用v-for来循环遍历实现的；",
        "使用better-scroll实现推荐页面轮播效果；"
      ]
    }
  ]
}
